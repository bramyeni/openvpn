# $Id: Dockerfile 390 2021-05-31 16:56:54Z bpahlawa $
# $Author: bpahlawa $
# Created: 26-APR-2021
# Modified by: bpahlawa
# $Date: 2021-06-01 00:56:54 +0800 (Tue, 01 Jun 2021) $
# $Revision: 390 $
#
# How to run the docker image
# for single node:    
# docker run -it --name openvpn --net host -v /opt/openvpn:/etc/openvpn --cap-add=NET_ADMIN --device /dev/net/tun:/dev/net/tun openvpn server archdocker
# 
# add entrypoint.sh in base64 to Dockerfile
# echo -e "RUN echo \"$(cat openvpn.env | base64 -w0)\" | base64 -d > /usr/local/bin/openvpn.env\nRUN chmod ugo+x /usr/local/bin/openvpn.env" >> Dockerfile
# echo -e "RUN echo \"$(cat entrypoint-openvpn.sh | base64 -w0)\" | base64 -d > /usr/local/bin/entrypoint-openvpn.sh\nRUN chmod ugo+x /usr/local/bin/entrypoint-openvpn.sh\nENTRYPOINT [\"/usr/local/bin/entrypoint-openvpn.sh\"]" >> Dockerfile
#
# How to build this Dockerfile
# Run the following command where Dockerfile exists
#
# docker build --tag openvpn .

FROM alpine:latest
MAINTAINER brpahlaw

WORKDIR /usr/local/bin
RUN apk update
RUN apk upgrade
RUN apk add openvpn easy-rsa openssh-client
RUN echo "IyEvYmluL2Jhc2gKIyAkSWQ6IGdhbGVyYS5lbnYgMzc4IDIwMjEtMDQtMjYgMDk6Mzc6NDJaIGJwYWhsYXdhICQKIyBDcmVhdGVkIDE5LUFQUi0yMDIxCiMgJEF1dGhvcjogYnBhaGxhd2EgJAojICREYXRlOiAyMDIxLTA0LTI2IDE3OjM3OjQyICswODAwIChNb24sIDI2IEFwciAyMDIxKSAkCiMgJFJldmlzaW9uOiAzNzggJAoKCmV4cG9ydCBPUEVOVlBOX1BPUlQ9JHtPUEVOVlBOX1BPUlQ6LTExOTR9CmV4cG9ydCBPUEVOVlBOX1BST1RPQ09MPSR7T1BFTlZQTl9QUk9UT0NPTDotInVkcCJ9CmV4cG9ydCBPUEVOVlBOX1VTRVI9JHtPUEVOVlBOX1VTRVI6LSJub2JvZHkifQpleHBvcnQgT1BFTlZQTl9HUk9VUD0ke09QRU5WUE5fR1JPVVA6LSJub2JvZHkifQpleHBvcnQgT1BFTlZQTl9DSVBIRVI9JHtPUEVOVlBOX0NJUEhFUjotIkFFUy0yNTYtR0NNIn0KZXhwb3J0IE9QRU5WUE5fVExTVkVSX01JTj0ke09QRU5WUE5fVExTVkVSX01JTjotIjEuMiJ9CmV4cG9ydCBPUEVOVlBOX1RMU19DSVBIRVI9JHtPUEVOVlBOX1RMU19DSVBIRVI6LSJUTFMtRUNESEUtRUNEU0EtV0lUSC1BRVMtMjU2LUdDTS1TSEEzODQifQpleHBvcnQgT1BFTlZQTl9NQVhfQ0xJRU5UUz0ke09QRU5WUE5fTUFYX0NMSUVOVFM6LSI1In0KZXhwb3J0IE9QRU5WUE5fU1RBVFVTX0xPRz0ke09QRU5WUE5fU1RBVFVTX0xPRzotIi92YXIvbG9nL29wZW52cG4tc3RhdHVzLmxvZyJ9CmV4cG9ydCBPUEVOVlBOX1NUQVRVU19WRVJCT1NJVFk9JHtPUEVOVlBOX1NUQVRVU19WRVJCT1NJVFk6LSI1In0KZXhwb3J0IE9QRU5WUE5fREVWPSR7T1BFTlZQTl9ERVY6LSJ0dW4ifQpleHBvcnQgT1BFTlZQTl9ST1VURV9DTUQ9JHtPUEVOVlBOX1JPVVRFX0NNRDotInJvdXRlIDE5Mi4xNjguMC4wIDI1NS4yNTUuMjU1LjAifQpleHBvcnQgT1BFTlZQTl9QVVNIX0NNRD0ke09QRU5WUE5fUFVTSF9DTUQ6LSJwdXNoIFwicm91dGUgMTAuMi4wLjAgMjU1LjI1NS4yNTUuMFwiIn0KZXhwb3J0IE9QRU5WUE5fUkVCVUlMRF9DQUNFUlQ9JHtPUEVOVlBOX1JFQlVJTERfQ0FDRVJUOi0ibm8ifQpleHBvcnQgT1BFTlZQTl9SRUJVSUxEX0NFUlQ9JHtPUEVOVlBOX1JFQlVJTERfQ0VSVDotInllcyJ9CmV4cG9ydCBPUEVOVlBOX0hPU1RfRElTSz0ke09QRU5WUE5fSE9TVF9ESVNLOi0iL29wdC9vcGVudnBuIn0KCgojU2VydmVyIHNwZWNpZmljCmV4cG9ydCBPUEVOVlBOX1NFUlZFUl9DTUQ9JHtPUEVOVlBOX1NFUlZFUl9DTUQ6LSJzZXJ2ZXIgMTAuOC4wLjAgMjU1LjI1NS4yNTUuMCJ9CiNtdWx0aXBsZSByb3V0ZSBieSB1c2luZyBjb2xvbiA6CmV4cG9ydCBPUEVOVlBOX0NMSUVOVENPTkZJR19ESVI9JHtPUEVOVlBOX0NMSUVOVENPTkZJR19ESVI6LSIvZXRjL29wZW52cG4vY2xpZW50LWNvbmZpZ3MifQpleHBvcnQgT1BFTlZQTl9DTElFTlRDT05GSUdfQ01EPSR7T1BFTlZQTl9DTElFTlRDT05GSUdfQ01EOi0iaWZjb25maWctcHVzaCAxMC44LjAuMiAxMC44LjAuMVxuaXJvdXRlIDE5Mi4xNjguMC4wIDI1NS4yNTUuMjU1LjAifQoKI3NlbGYtc2lnbmVkIGNlcnRpZmljYXRlIHNwZWNpZmljCmV4cG9ydCBPUEVOVlBOX0VBU1lSU0FfU1NMX0NPTkY9JHtPUEVOVlBOX0VBU1lSU0FfU1NMX0NPTkY6LSIvZXRjL29wZW52cG4vZWFzeS1yc2Evb3BlbnNzbC1lYXN5cnNhLmNuZiJ9CmV4cG9ydCBPUEVOVlBOX0VBU1lSU0FfUkVRX0NPVU5UUlk9JHtPUEVOVlBOX0VBU1lSU0FfUkVRX0NPVU5UUlk6LSJBVSJ9CmV4cG9ydCBPUEVOVlBOX0VBU1lSU0FfUkVRX1BST1ZJTkNFPSR7T1BFTlZQTl9FQVNZUlNBX1JFUV9QUk9WSU5DRTotIldlc3Rlcm4gQXVzdHJhbGlhIn0KZXhwb3J0IE9QRU5WUE5fRUFTWVJTQV9SRVFfQ0lUWT0ke09QRU5WUE5fRUFTWVJTQV9SRVFfQ0lUWTotIlBlcnRoIn0KZXhwb3J0IE9QRU5WUE5fRUFTWVJTQV9SRVFfT1JHPSR7T1BFTlZQTl9FQVNZUlNBX1JFUV9PUkc6LSJCcmFtIEVudGVycHJpc2UifQpleHBvcnQgT1BFTlZQTl9FQVNZUlNBX1JFUV9FTUFJTD0ke09QRU5WUE5fRUFTWVJTQV9SRVFfRU1BSUw6LSJzYWxlc0BicmFtLmNvbSJ9CmV4cG9ydCBPUEVOVlBOX0VBU1lSU0FfUkVRX09VPSR7T1BFTlZQTl9FQVNZUlNBX1JFUV9PVTotIklUIn0KZXhwb3J0IE9QRU5WUE5fRUFTWVJTQV9LRVlfU0laRT0ke09QRU5WUE5fRUFTWVJTQV9LRVlfU0laRTotIjIwNDgifQpleHBvcnQgT1BFTlZQTl9DQV9QQVNTV09SRD0ke09QRU5WUE5fQ0FfUEFTU1dPUkQ6LSJHMGRrbjB3cyJ9CmV4cG9ydCBPUEVOVlBOX0VBU1lSU0FfQkFUQ0g9JHtPUEVOVlBOX0VBU1lSU0FfQkFUQ0g6LSJ5ZXMifQpleHBvcnQgT1BFTlZQTl9FQVNZUlNBX1JFUV9DTj0ke09QRU5WUE5fRUFTWVJTQV9SRVFfQ046LSJ0aGVob3N0In0K" | base64 -d > /usr/local/bin/openvpn.env
RUN chmod ugo+x /usr/local/bin/openvpn.env
RUN echo "" | base64 -d > /usr/local/bin/entrypoint-openvpn.sh
RUN chmod ugo+x /usr/local/bin/entrypoint-openvpn.sh
ENTRYPOINT ["/usr/local/bin/entrypoint-openvpn.sh"]
